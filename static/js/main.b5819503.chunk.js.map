{"version":3,"sources":["logo.svg","components/Result1.js","components/Result2.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Result1","this","props","data","Component","Result2","Dashboard","submitHandler1","e","preventDefault","console","log","state","axios","get","input_encoder","then","res","setState","encoded","showResult1","submitHandler2","input_decoder","decoded","showResult2","onChangeHandler","target","name","value","onSubmit","type","onChange","Button","variant","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,kC,iLCa5BC,EAVf,uKAEQ,OACI,6BACI,sDAA2B,kCAAQC,KAAKC,MAAMC,YAJ9D,GAA6BC,aCSdC,EAVf,uKAEQ,OACI,6BACI,sDAA2B,kCAAQJ,KAAKC,MAAMC,YAJ9D,GAA6BC,aCGhBE,EAAb,kDAEI,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IAWVK,eAAiB,SAACC,GACdA,EAAEC,iBACFC,QAAQC,IAAI,EAAKC,OACjBC,IACKC,IAAI,mDAAqD,EAAKF,MAAMG,eACpEC,MAAK,SAACC,GACH,EAAKC,SAAS,CAAEC,QAASF,EAAId,KAAJ,UACzB,EAAKe,SAAS,CAAEE,aAAa,IAC7BV,QAAQC,IAAIM,EAAId,KAAJ,aApBL,EAwBnBkB,eAAiB,SAACb,GACdA,EAAEC,iBACFC,QAAQC,IAAI,EAAKC,OACjBC,IACKC,IAAI,mDAAqD,EAAKF,MAAMU,eACpEN,MAAK,SAACC,GACH,EAAKC,SAAS,CAAEK,QAASN,EAAId,KAAJ,UACzB,EAAKe,SAAS,CAAEM,aAAa,IAC7Bd,QAAQC,IAAIM,EAAId,KAAJ,aAhCL,EAoCnBsB,gBAAkB,SAACjB,GACf,EAAKU,SAAL,eAAiBV,EAAEkB,OAAOC,KAAOnB,EAAEkB,OAAOE,SAnC1C,EAAKhB,MAAQ,CACTG,cAAe,GACfO,cAAe,GACfH,QAAS,GACTI,QAAS,GACTH,aAAa,EACbI,aAAa,GARF,EAFvB,qDA0Cc,IAAD,EACgFvB,KAAKW,MAAlFG,EADH,EACGA,cAAeO,EADlB,EACkBA,cAAiCF,GADnD,EACiCD,QADjC,EAC0CI,QAD1C,EACmDH,aAAaI,EADhE,EACgEA,YACrE,OACI,6BACI,0BAAMK,SAAU5B,KAAKM,gBACjB,6BACA,6BACI,gDACA,6BACA,2BACIuB,KAAK,OACLH,KAAK,gBACLC,MAAOb,EACPgB,SAAU9B,KAAKwB,mBAGvB,6BACA,6BACI,kBAACO,EAAA,EAAD,CAAQC,QAAQ,OAAOH,KAAK,UAA5B,iBAOPV,GAAe,kBAAC,EAAD,CAASjB,KAAMF,KAAKW,MAAMO,UAE1C,0BAAMU,SAAU5B,KAAKoB,gBACjB,6BACA,6BACI,wDACA,6BACA,2BACIS,KAAK,OACLH,KAAK,gBACLC,MAAON,EACPS,SAAU9B,KAAKwB,mBAGvB,6BACA,6BACI,kBAACO,EAAA,EAAD,CAAQC,QAAQ,OAAOH,KAAK,UAA5B,iBAMPN,GAAe,kBAAC,EAAD,CAASrB,KAAMF,KAAKW,MAAMW,eAzF1D,GAA+BnB,aCOhB8B,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.b5819503.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport Dashboard from './Dashboard'\r\n\r\nexport class Result1 extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h5>The encoded string is: <span> {this.props.data}</span></h5>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Result1\r\n","import React, { Component } from 'react'\r\n\r\nexport class Result2 extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h5>The decoded string is: <span> {this.props.data}</span></h5>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Result2\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport Result1 from './Result1';\r\nimport Result2 from './Result2';\r\nexport class Dashboard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            input_encoder: '',\r\n            input_decoder: '',\r\n            encoded: '',\r\n            decoded: '',\r\n            showResult1: false,\r\n            showResult2: false\r\n        }\r\n    }\r\n\r\n    submitHandler1 = (e) => {\r\n        e.preventDefault();\r\n        console.log(this.state);\r\n        axios\r\n            .get(\"https://ttt-compress.herokuapp.com/encode?input=\" + this.state.input_encoder)\r\n            .then((res) => {\r\n                this.setState({ encoded: res.data[\"encoded\"] });\r\n                this.setState({ showResult1: true })\r\n                console.log(res.data[\"encoded\"]);\r\n            });\r\n    };\r\n\r\n    submitHandler2 = (e) => {\r\n        e.preventDefault();\r\n        console.log(this.state);\r\n        axios\r\n            .get(\"https://ttt-compress.herokuapp.com/decode?input=\" + this.state.input_decoder)\r\n            .then((res) => {\r\n                this.setState({ decoded: res.data[\"decoded\"] });\r\n                this.setState({ showResult2: true })\r\n                console.log(res.data[\"decoded\"]);\r\n            });\r\n    };\r\n\r\n    onChangeHandler = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n\r\n    render() {\r\n        const { input_encoder, input_decoder, encoded, decoded, showResult1, showResult2 } = this.state;\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.submitHandler1}>\r\n                    <br />\r\n                    <div>\r\n                        <label>Enter input: </label>\r\n                        <br />\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"input_encoder\"\r\n                            value={input_encoder}\r\n                            onChange={this.onChangeHandler}\r\n                        />\r\n                    </div>\r\n                    <br />\r\n                    <div>\r\n                        <Button variant=\"info\" type=\"submit\">\r\n                            Get Encoded\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n\r\n\r\n                {showResult1 && <Result1 data={this.state.encoded} />}\r\n\r\n                <form onSubmit={this.submitHandler2}>\r\n                    <br />\r\n                    <div>\r\n                        <label>Enter encoded input: </label>\r\n                        <br />\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"input_decoder\"\r\n                            value={input_decoder}\r\n                            onChange={this.onChangeHandler}\r\n                        />\r\n                    </div>\r\n                    <br />\r\n                    <div>\r\n                        <Button variant=\"info\" type=\"submit\">\r\n                            Get Decoded\r\n                        </Button>\r\n                    </div>\r\n\r\n                </form>\r\n                {showResult2 && <Result2 data={this.state.decoded} />}\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Dashboard } from './components/Dashboard'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}